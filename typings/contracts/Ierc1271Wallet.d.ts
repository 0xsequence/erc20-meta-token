/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface Ierc1271WalletInterface extends ethers.utils.Interface {
  functions: {
    "isValidSignature(bytes32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;

  events: {};
}

export class Ierc1271Wallet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: Ierc1271WalletInterface;

  functions: {
    /**
     * MUST return the correct magic value if the signature provided is valid for the provided hash   > The bytes4 magic value to return when signature is valid is 0x20c13b0b : bytes4(keccak256("isValidSignature(bytes,bytes)")   > This function MAY modify Ethereum's state
     * Verifies whether the provided signature is valid with respect to the provided hash
     * @param _hash keccak256 hash that was signed
     * @param _signature Signature byte array associated with _data
     */
    "isValidSignature(bytes32,bytes)"(
      _hash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      magicValue: string;
      0: string;
    }>;

    /**
     * MUST return the correct magic value if the signature provided is valid for the provided data   > The bytes4 magic value to return when signature is valid is 0x20c13b0b : bytes4(keccak256("isValidSignature(bytes,bytes)")   > This function MAY modify Ethereum's state
     * Verifies whether the provided signature is valid with respect to the provided data
     * @param _data Arbitrary length data signed on the behalf of address(this)
     * @param _signature Signature byte array associated with _data
     */
    "isValidSignature(bytes,bytes)"(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      magicValue: string;
      0: string;
    }>;
  };

  /**
   * MUST return the correct magic value if the signature provided is valid for the provided hash   > The bytes4 magic value to return when signature is valid is 0x20c13b0b : bytes4(keccak256("isValidSignature(bytes,bytes)")   > This function MAY modify Ethereum's state
   * Verifies whether the provided signature is valid with respect to the provided hash
   * @param _hash keccak256 hash that was signed
   * @param _signature Signature byte array associated with _data
   */
  "isValidSignature(bytes32,bytes)"(
    _hash: BytesLike,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * MUST return the correct magic value if the signature provided is valid for the provided data   > The bytes4 magic value to return when signature is valid is 0x20c13b0b : bytes4(keccak256("isValidSignature(bytes,bytes)")   > This function MAY modify Ethereum's state
   * Verifies whether the provided signature is valid with respect to the provided data
   * @param _data Arbitrary length data signed on the behalf of address(this)
   * @param _signature Signature byte array associated with _data
   */
  "isValidSignature(bytes,bytes)"(
    _data: BytesLike,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  staticCall: {
    /**
     * MUST return the correct magic value if the signature provided is valid for the provided hash   > The bytes4 magic value to return when signature is valid is 0x20c13b0b : bytes4(keccak256("isValidSignature(bytes,bytes)")   > This function MAY modify Ethereum's state
     * Verifies whether the provided signature is valid with respect to the provided hash
     * @param _hash keccak256 hash that was signed
     * @param _signature Signature byte array associated with _data
     */
    "isValidSignature(bytes32,bytes)"(
      _hash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * MUST return the correct magic value if the signature provided is valid for the provided data   > The bytes4 magic value to return when signature is valid is 0x20c13b0b : bytes4(keccak256("isValidSignature(bytes,bytes)")   > This function MAY modify Ethereum's state
     * Verifies whether the provided signature is valid with respect to the provided data
     * @param _data Arbitrary length data signed on the behalf of address(this)
     * @param _signature Signature byte array associated with _data
     */
    "isValidSignature(bytes,bytes)"(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    isValidSignature(
      _hash: BytesLike,
      _signature: BytesLike
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isValidSignature(
      _hash: BytesLike,
      _signature: BytesLike
    ): Promise<PopulatedTransaction>;
  };
}
