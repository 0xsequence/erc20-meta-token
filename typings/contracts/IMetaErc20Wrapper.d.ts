/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMetaErc20WrapperInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "deposit(address,address,uint256)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
    "getTokenID(address)": FunctionFragment;
    "getIdAddress(uint256)": FunctionFragment;
    "getNTokens()": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [(string)[], (BigNumberish)[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, (BigNumberish)[], (BigNumberish)[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTokenID", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getIdAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getNTokens", values?: void): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, (BigNumberish)[], (BigNumberish)[], BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokenID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIdAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export class IMetaErc20Wrapper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMetaErc20WrapperInterface;

  functions: {
    /**
     * Get the balance of an account's Tokens
     * @param _id ID of the Token
     * @param _owner The address of the token holder
     */
    balanceOf(
      _owner: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Get the balance of multiple account/token pairs
     * @param _ids ID of the Tokens
     * @param _owners The addresses of the token holders
     */
    balanceOfBatch(
      _owners: (string)[],
      _ids: (BigNumberish)[],
      overrides?: CallOverrides
    ): Promise<{
      0: (BigNumber)[];
    }>;

    /**
     * Queries the approval status of an operator for a given owner
     * @param _operator Address of authorized operator
     * @param _owner The owner of the Tokens
     */
    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<{
      isOperator: boolean;
      0: boolean;
    }>;

    /**
     * MUST emit TransferBatch event on success Caller must be approved to manage the _from account's tokens (see isApprovedForAll) MUST throw if `_to` is the zero address MUST throw if length of `_ids` is not the same as length of `_amounts` MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent MUST throw on any other error When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)
     * Send multiple types of Tokens from the _from address to the _to address (with safety call)
     * @param _amounts Transfer amounts per token type
     * @param _data Additional data with no specified format, sent in call to `_to`
     * @param _from Source addresses
     * @param _ids IDs of each token type
     * @param _to Target addresses
     */
    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: (BigNumberish)[],
      _amounts: (BigNumberish)[],
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * MUST emit TransferSingle event on success Caller must be approved to manage the _from account's tokens (see isApprovedForAll) MUST throw if `_to` is the zero address MUST throw if balance of sender for token `_id` is lower than the `_amount` sent MUST throw on any other error When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`
     * Transfers amount of an _id from the _from address to the _to address specified
     * @param _amount Transfered amount
     * @param _data Additional data with no specified format, sent in call to `_to`
     * @param _from Source address
     * @param _id ID of the token type
     * @param _to Target address
     */
    safeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * MUST emit the ApprovalForAll event on success
     * Enable or disable approval for a third party ("operator") to manage all of caller's tokens
     * @param _approved True if the operator is approved, false to revoke approval
     * @param _operator Address to add to the set of authorized operators
     */
    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Deposit ERC20 tokens or ETH in this contract to receive wrapped ERC20s
     * @param _recipient Address that will receive the ERC-1155 tokens
     * @param _token The addess of the token to deposit in this contract
     * @param _value The amount of token to deposit in this contract Note: Users must first approve this contract addres on the contract of the ERC20 to be deposited
     */
    deposit(
      _token: string,
      _recipient: string,
      _value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Withdraw wrapped ERC20 tokens in this contract to receive the original ERC20s or ETH
     * @param _to The address where the withdrawn tokens will go to
     * @param _token The addess of the token to withdrww from this contract
     * @param _value The amount of tokens to withdraw
     */
    withdraw(
      _token: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Return the Meta-ERC20 token ID for the given ERC-20 token address
     * @param _token ERC-20 token address to get the corresponding Meta-ERC20 token ID
     */
    getTokenID(
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      tokenID: BigNumber;
      0: BigNumber;
    }>;

    /**
     * Return the ERC-20 token address for the given Meta-ERC20 token ID
     * @param _id Meta-ERC20 token ID to get the corresponding ERC-20 token address
     */
    getIdAddress(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      token: string;
      0: string;
    }>;

    /**
     * Returns number of tokens currently registered
     */
    getNTokens(
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    /**
     * Withdraw ERC-20 tokens when receiving their ERC-1155 counterpart
     * @param _data Additional data with no specified format
     * @param _from The address which previously owned the token
     * @param _id The id of the token being transferred
     * @param _operator The address which called the `safeTransferFrom` function
     * @param _value The amount of tokens being transferred
     */
    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Withdraw ERC-20 tokens when receiving their ERC-1155 counterpart
     * @param _data Additional data with no specified format
     * @param _from The address which previously owned the token
     * @param _ids An array containing ids of each token being transferred
     * @param _operator The address which called the `safeBatchTransferFrom` function
     * @param _values An array containing amounts of each token being transferred
     */
    onERC1155BatchReceived(
      _operator: string,
      _from: string,
      _ids: (BigNumberish)[],
      _values: (BigNumberish)[],
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Get the balance of an account's Tokens
   * @param _id ID of the Token
   * @param _owner The address of the token holder
   */
  balanceOf(
    _owner: string,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Get the balance of multiple account/token pairs
   * @param _ids ID of the Tokens
   * @param _owners The addresses of the token holders
   */
  balanceOfBatch(
    _owners: (string)[],
    _ids: (BigNumberish)[],
    overrides?: CallOverrides
  ): Promise<(BigNumber)[]>;

  /**
   * Queries the approval status of an operator for a given owner
   * @param _operator Address of authorized operator
   * @param _owner The owner of the Tokens
   */
  isApprovedForAll(
    _owner: string,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * MUST emit TransferBatch event on success Caller must be approved to manage the _from account's tokens (see isApprovedForAll) MUST throw if `_to` is the zero address MUST throw if length of `_ids` is not the same as length of `_amounts` MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent MUST throw on any other error When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)
   * Send multiple types of Tokens from the _from address to the _to address (with safety call)
   * @param _amounts Transfer amounts per token type
   * @param _data Additional data with no specified format, sent in call to `_to`
   * @param _from Source addresses
   * @param _ids IDs of each token type
   * @param _to Target addresses
   */
  safeBatchTransferFrom(
    _from: string,
    _to: string,
    _ids: (BigNumberish)[],
    _amounts: (BigNumberish)[],
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * MUST emit TransferSingle event on success Caller must be approved to manage the _from account's tokens (see isApprovedForAll) MUST throw if `_to` is the zero address MUST throw if balance of sender for token `_id` is lower than the `_amount` sent MUST throw on any other error When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`
   * Transfers amount of an _id from the _from address to the _to address specified
   * @param _amount Transfered amount
   * @param _data Additional data with no specified format, sent in call to `_to`
   * @param _from Source address
   * @param _id ID of the token type
   * @param _to Target address
   */
  safeTransferFrom(
    _from: string,
    _to: string,
    _id: BigNumberish,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * MUST emit the ApprovalForAll event on success
   * Enable or disable approval for a third party ("operator") to manage all of caller's tokens
   * @param _approved True if the operator is approved, false to revoke approval
   * @param _operator Address to add to the set of authorized operators
   */
  setApprovalForAll(
    _operator: string,
    _approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Deposit ERC20 tokens or ETH in this contract to receive wrapped ERC20s
   * @param _recipient Address that will receive the ERC-1155 tokens
   * @param _token The addess of the token to deposit in this contract
   * @param _value The amount of token to deposit in this contract Note: Users must first approve this contract addres on the contract of the ERC20 to be deposited
   */
  deposit(
    _token: string,
    _recipient: string,
    _value: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Withdraw wrapped ERC20 tokens in this contract to receive the original ERC20s or ETH
   * @param _to The address where the withdrawn tokens will go to
   * @param _token The addess of the token to withdrww from this contract
   * @param _value The amount of tokens to withdraw
   */
  withdraw(
    _token: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Return the Meta-ERC20 token ID for the given ERC-20 token address
   * @param _token ERC-20 token address to get the corresponding Meta-ERC20 token ID
   */
  getTokenID(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Return the ERC-20 token address for the given Meta-ERC20 token ID
   * @param _id Meta-ERC20 token ID to get the corresponding ERC-20 token address
   */
  getIdAddress(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * Returns number of tokens currently registered
   */
  getNTokens(overrides?: CallOverrides): Promise<void>;

  /**
   * Withdraw ERC-20 tokens when receiving their ERC-1155 counterpart
   * @param _data Additional data with no specified format
   * @param _from The address which previously owned the token
   * @param _id The id of the token being transferred
   * @param _operator The address which called the `safeTransferFrom` function
   * @param _value The amount of tokens being transferred
   */
  onERC1155Received(
    _operator: string,
    _from: string,
    _id: BigNumberish,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Withdraw ERC-20 tokens when receiving their ERC-1155 counterpart
   * @param _data Additional data with no specified format
   * @param _from The address which previously owned the token
   * @param _ids An array containing ids of each token being transferred
   * @param _operator The address which called the `safeBatchTransferFrom` function
   * @param _values An array containing amounts of each token being transferred
   */
  onERC1155BatchReceived(
    _operator: string,
    _from: string,
    _ids: (BigNumberish)[],
    _values: (BigNumberish)[],
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  staticCall: {
    /**
     * Get the balance of an account's Tokens
     * @param _id ID of the Token
     * @param _owner The address of the token holder
     */
    balanceOf(
      _owner: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the balance of multiple account/token pairs
     * @param _ids ID of the Tokens
     * @param _owners The addresses of the token holders
     */
    balanceOfBatch(
      _owners: (string)[],
      _ids: (BigNumberish)[],
      overrides?: CallOverrides
    ): Promise<(BigNumber)[]>;

    /**
     * Queries the approval status of an operator for a given owner
     * @param _operator Address of authorized operator
     * @param _owner The owner of the Tokens
     */
    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * MUST emit TransferBatch event on success Caller must be approved to manage the _from account's tokens (see isApprovedForAll) MUST throw if `_to` is the zero address MUST throw if length of `_ids` is not the same as length of `_amounts` MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent MUST throw on any other error When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)
     * Send multiple types of Tokens from the _from address to the _to address (with safety call)
     * @param _amounts Transfer amounts per token type
     * @param _data Additional data with no specified format, sent in call to `_to`
     * @param _from Source addresses
     * @param _ids IDs of each token type
     * @param _to Target addresses
     */
    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: (BigNumberish)[],
      _amounts: (BigNumberish)[],
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<void>;

    /**
     * MUST emit TransferSingle event on success Caller must be approved to manage the _from account's tokens (see isApprovedForAll) MUST throw if `_to` is the zero address MUST throw if balance of sender for token `_id` is lower than the `_amount` sent MUST throw on any other error When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`
     * Transfers amount of an _id from the _from address to the _to address specified
     * @param _amount Transfered amount
     * @param _data Additional data with no specified format, sent in call to `_to`
     * @param _from Source address
     * @param _id ID of the token type
     * @param _to Target address
     */
    safeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<void>;

    /**
     * MUST emit the ApprovalForAll event on success
     * Enable or disable approval for a third party ("operator") to manage all of caller's tokens
     * @param _approved True if the operator is approved, false to revoke approval
     * @param _operator Address to add to the set of authorized operators
     */
    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<void>;

    /**
     * Deposit ERC20 tokens or ETH in this contract to receive wrapped ERC20s
     * @param _recipient Address that will receive the ERC-1155 tokens
     * @param _token The addess of the token to deposit in this contract
     * @param _value The amount of token to deposit in this contract Note: Users must first approve this contract addres on the contract of the ERC20 to be deposited
     */
    deposit(
      _token: string,
      _recipient: string,
      _value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<void>;

    /**
     * Withdraw wrapped ERC20 tokens in this contract to receive the original ERC20s or ETH
     * @param _to The address where the withdrawn tokens will go to
     * @param _token The addess of the token to withdrww from this contract
     * @param _value The amount of tokens to withdraw
     */
    withdraw(
      _token: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    /**
     * Return the Meta-ERC20 token ID for the given ERC-20 token address
     * @param _token ERC-20 token address to get the corresponding Meta-ERC20 token ID
     */
    getTokenID(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Return the ERC-20 token address for the given Meta-ERC20 token ID
     * @param _id Meta-ERC20 token ID to get the corresponding ERC-20 token address
     */
    getIdAddress(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * Returns number of tokens currently registered
     */
    getNTokens(overrides?: CallOverrides): Promise<void>;

    /**
     * Withdraw ERC-20 tokens when receiving their ERC-1155 counterpart
     * @param _data Additional data with no specified format
     * @param _from The address which previously owned the token
     * @param _id The id of the token being transferred
     * @param _operator The address which called the `safeTransferFrom` function
     * @param _value The amount of tokens being transferred
     */
    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<string>;

    /**
     * Withdraw ERC-20 tokens when receiving their ERC-1155 counterpart
     * @param _data Additional data with no specified format
     * @param _from The address which previously owned the token
     * @param _ids An array containing ids of each token being transferred
     * @param _operator The address which called the `safeBatchTransferFrom` function
     * @param _values An array containing amounts of each token being transferred
     */
    onERC1155BatchReceived(
      _operator: string,
      _from: string,
      _ids: (BigNumberish)[],
      _values: (BigNumberish)[],
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<string>;
  };

  filters: {
    ApprovalForAll(
      _owner: string | null,
      _operator: string | null,
      _approved: null
    ): EventFilter;

    TransferBatch(
      _operator: string | null,
      _from: string | null,
      _to: string | null,
      _ids: null,
      _amounts: null
    ): EventFilter;

    TransferSingle(
      _operator: string | null,
      _from: string | null,
      _to: string | null,
      _id: null,
      _amount: null
    ): EventFilter;

    URI(_amount: null, _id: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    balanceOf(_owner: string, _id: BigNumberish): Promise<BigNumber>;
    balanceOfBatch(
      _owners: (string)[],
      _ids: (BigNumberish)[]
    ): Promise<BigNumber>;
    isApprovedForAll(_owner: string, _operator: string): Promise<BigNumber>;
    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: (BigNumberish)[],
      _amounts: (BigNumberish)[],
      _data: BytesLike
    ): Promise<BigNumber>;
    safeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike
    ): Promise<BigNumber>;
    setApprovalForAll(
      _operator: string,
      _approved: boolean
    ): Promise<BigNumber>;
    deposit(
      _token: string,
      _recipient: string,
      _value: BigNumberish
    ): Promise<BigNumber>;
    withdraw(
      _token: string,
      _to: string,
      _value: BigNumberish
    ): Promise<BigNumber>;
    getTokenID(_token: string): Promise<BigNumber>;
    getIdAddress(_id: BigNumberish): Promise<BigNumber>;
    getNTokens(): Promise<BigNumber>;
    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike
    ): Promise<BigNumber>;
    onERC1155BatchReceived(
      _operator: string,
      _from: string,
      _ids: (BigNumberish)[],
      _values: (BigNumberish)[],
      _data: BytesLike
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(_owner: string, _id: BigNumberish): Promise<PopulatedTransaction>;
    balanceOfBatch(
      _owners: (string)[],
      _ids: (BigNumberish)[]
    ): Promise<PopulatedTransaction>;
    isApprovedForAll(
      _owner: string,
      _operator: string
    ): Promise<PopulatedTransaction>;
    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: (BigNumberish)[],
      _amounts: (BigNumberish)[],
      _data: BytesLike
    ): Promise<PopulatedTransaction>;
    safeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike
    ): Promise<PopulatedTransaction>;
    setApprovalForAll(
      _operator: string,
      _approved: boolean
    ): Promise<PopulatedTransaction>;
    deposit(
      _token: string,
      _recipient: string,
      _value: BigNumberish
    ): Promise<PopulatedTransaction>;
    withdraw(
      _token: string,
      _to: string,
      _value: BigNumberish
    ): Promise<PopulatedTransaction>;
    getTokenID(_token: string): Promise<PopulatedTransaction>;
    getIdAddress(_id: BigNumberish): Promise<PopulatedTransaction>;
    getNTokens(): Promise<PopulatedTransaction>;
    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike
    ): Promise<PopulatedTransaction>;
    onERC1155BatchReceived(
      _operator: string,
      _from: string,
      _ids: (BigNumberish)[],
      _values: (BigNumberish)[],
      _data: BytesLike
    ): Promise<PopulatedTransaction>;
  };
}
